# -*- coding: utf-8  -*-
"""
Extract Wikibase entities from JSON dumps.

The dumps are generated by the Wikibase repository maintenance
script 'dumpJSON.php' found here:
https://phabricator.wikimedia.org/diffusion/EWBA/browse/master/repo/maintenance/dumpJson.php

Wikidata dumps are available here:
https://dumps.wikimedia.org/wikidatawiki/latest/

"""
#
# (C) Pywikibot team, 2015-2016
#
# Distributed under the terms of the MIT license.
#
from __future__ import absolute_import, unicode_literals

try:
    import ijson
except ImportError as e:
    ijson = e

import pywikibot
from pywikibot.tools import open_archive


class JSONDump(object):

    """
    Wikibase JSON dump reader.

    The method 'generator' of this class returns all items or properties in
    the file.
    """

    def __init__(self, repo, filename):
        """Constructor."""
        if isinstance(ijson, ImportError):
            raise ijson
        self.repo = repo
        self.filename = filename

    def _process(self, entity_data, entity_type):
        qid = entity_data['id']
        data_entity_type = entity_data['type']

        if entity_type and data_entity_type != entity_type:
            return None

        if data_entity_type == 'item':
            entity = pywikibot.ItemPage(self.repo, qid)
        elif data_entity_type == 'property':
            entity = pywikibot.PropertyPage(self.repo, qid)

        entity._content = entity_data
        entity._content['lastrevid'] = 0
        return entity

    def generator(self, entity_type='item'):
        """
        Yield Wikibase page from the JSON dump.

        @param entity_type: The requested entity type. May be 'item',
            'property' or None. If None it'll yield all entity types. If it's
            none of the values it'll yield no entities.
        @type entity_type: str or None
        @return: A generator which contains the WikibasePage instances.
        @rtype: ItemPage or PropertyPage instances, depending on entity_type
            (or both).
        """
        with open_archive(self.filename) as f:
            for data in ijson.items(f, 'item'):
                result = self._process(data, entity_type)
                if result is not None:
                    yield result
